<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://blog.nizmow.net/xml/base.min.xml"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c# on Neil's Notes</title><link>https://blog.nizmow.net/tags/c#/</link><description>Recent content in c# on Neil's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-nz</language><lastBuildDate>Tue, 03 Dec 2019 12:47:16 +0100</lastBuildDate><atom:link href="https://blog.nizmow.net/tags/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>Publishing your Hugo blog on Github Pages with a 'gh-pages' branch</title><link>https://blog.nizmow.net/2020/01/publishing-your-hugo-blog-on-github-pages-with-a-gh-pages-branch/</link><pubDate>Mon, 20 Jan 2020 19:13:23 +0100</pubDate><guid>https://blog.nizmow.net/2020/01/publishing-your-hugo-blog-on-github-pages-with-a-gh-pages-branch/</guid><description>&lt;p>I started this blog with Hugo because it&amp;rsquo;s super fast and simple, and hosting with Github Pages because it&amp;rsquo;s&amp;hellip; super fast and simple. Until now I was building manually and publishing all pages manually to a separate repository, but that was a) tedious and b) limiting my options for eg: writing new posts on my iPad. Today I had some time on my hands and decided to automate this process.&lt;/p>
&lt;h3 id="using-a-gh-pages-branch">Using a &lt;code>gh-pages&lt;/code> branch&lt;/h3>
&lt;p>First step was to switch away from a separate Github Pages repository to using a &lt;code>gh-pages&lt;/code> branch of the current repository, since having a separate repository seemed messy. Using a separate branch like this seems a bit counterintuitive when you&amp;rsquo;re thinking in the standard model of a git repository looking like a big tree, since we want this branch to live on its own with no relation to &lt;code>master&lt;/code>. Git has a name for this type of branch: an &lt;em>orphan&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. You can set up an empty orphan branch in an existing repository fairly easily:&lt;/p>
&lt;ol>
&lt;li>Make sure your &lt;code>master&lt;/code> branch is clean (everything is committed).&lt;/li>
&lt;li>Create your &lt;code>gh-pages&lt;/code> orphan branch: &lt;code>git checkout --orphan gh-pages&lt;/code>.&lt;/li>
&lt;li>Clear out this branch: &lt;code>git reset --hard&lt;/code>. It&amp;rsquo;s an orphan, so everything should be gone, but maybe follow up with &lt;code>rm -rf *&lt;/code> for stubborn stains.&lt;/li>
&lt;li>We want to push to origin, but we need a commit. Make an empty one with &lt;code>git commit --allow-empty -m &amp;quot;Initial gh-pages commit&amp;quot;&lt;/code>.&lt;/li>
&lt;li>Push! &lt;code>git push origin gh-pages&lt;/code>.&lt;/li>
&lt;li>Return to master: &lt;code>git checkout master&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>You&amp;rsquo;ve now got an empty &lt;code>gh-pages&lt;/code> branch. Now might be a good time to go into your repository settings on Github and configure this branch for hosting.&lt;/p>
&lt;h3 id="manually-publishing-to-the-gh-pages-branch">Manually publishing to the &lt;code>gh-pages&lt;/code> branch&lt;/h3>
&lt;p>With this done, you can now publish a Hugo build of your site from your &lt;code>publish&lt;/code> folder to your new &lt;code>gh-pages&lt;/code> branch. For this we use &lt;a href="https://git-scm.com/docs/git-worktree">&lt;code>git worktree&lt;/code>&lt;/a>. Later we can automate this, so it&amp;rsquo;s probably not a good idea to push any changes.&lt;/p>
&lt;ol>
&lt;li>Make sure your &lt;code>master&lt;/code> branch is clean.&lt;/li>
&lt;li>Remove your &lt;code>public/&lt;/code> directory and add it to &lt;code>.gitignore&lt;/code>.&lt;/li>
&lt;li>Run &lt;code>hugo&lt;/code> to build and publish your site. You can now add and commit your published changes: &lt;code>cd public &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;gh-pages commit!&amp;quot;&lt;/code>.&lt;/li>
&lt;li>Push! &lt;code>git push origin gh-pages&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>If all is well, you should be able to see your published content at the Github Pages site you configured earlier.&lt;/p>
&lt;p>If you intend to automate things, though, it&amp;rsquo;s probably a good idea to get rid of the worktree just added (&lt;code>rm -rf publish/ &amp;amp;&amp;amp; git worktree prune&lt;/code>) and get started with Github Actions&amp;hellip;&lt;/p>
&lt;h3 id="automate-with-github-actions">Automate with Github Actions&lt;/h3>
&lt;p>Github Actions is a CI platform built into Github, and contributor &lt;a href="https://github.com/crazy-max">crazy-max&lt;/a> has built a whole lot of useful Actions to help with publishing Github Pages. There are a few steps to get Actions going on your repository, a good start is clicking the &amp;ldquo;Actions&amp;rdquo; tab and following the instructions. You can see the Actions definitions file I&amp;rsquo;ve used to automate publishing of this blog &lt;a href="https://github.com/nizmow/blog/blob/master/.github/workflows/publish.yml">here&lt;/a>&amp;hellip; and if you poke through the commit history you can see some messy trial and error while I try to get things running right.&lt;/p>
&lt;p>With that done, you can push your Hugo code &lt;code>master&lt;/code> and in a few seconds your blog will be updated for you. Who needs Wordpress?&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>you could probably do some really wild things with this. Mega-mono-repo? &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Entity Framework Core performance and required properties</title><link>https://blog.nizmow.net/2019/12/entity-framework-core-performance-and-required-properties/</link><pubDate>Tue, 03 Dec 2019 12:47:16 +0100</pubDate><guid>https://blog.nizmow.net/2019/12/entity-framework-core-performance-and-required-properties/</guid><description>&lt;h3 id="background">Background&lt;/h3>
&lt;p>Entity Framework Core 3.0 was recently released with a lot of changes from 2.2, many of which were &lt;a href="https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-3.0/breaking-changes">breaking&lt;/a>. That&amp;rsquo;s a pretty big list. Since I was updating projects to .NET Core 3.0, I decided to upgrade a small project to EF Core 3.0 and see what I&amp;rsquo;d have to go through for an upgrade against larger projects.&lt;/p>
&lt;p>I ran into a breaking change straight away, and it&amp;rsquo;s the one I&amp;rsquo;ve seen the most activity about: &lt;a href="https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-3.0/breaking-changes#linq-queries-are-no-longer-evaluated-on-the-client">LINQ queries are no longer evaluated on the client&lt;/a>. &lt;em>Most&lt;/em> of the time this happens it&amp;rsquo;s caught as a run-time error when a query that can&amp;rsquo;t be evaluated as a single SQL statement is executed, but sometimes it can be more subtle. Fortunately for me it was caught with a unit test using SQLite in-memory mode.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>There have been &amp;ldquo;soft breaking&amp;rdquo; changes that result in performance regressions, and a bit of digging around revealed some projects on GitHub having issues with &lt;a href="https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-3.0/breaking-changes#eager-loading-single-query">&amp;ldquo;Eager loading of related entities now happens in a single query&amp;rdquo;&lt;/a>. Basically, eager loading would previously issue as a sequence of &lt;code>SELECT&lt;/code> statements that were merged in-memory, but in EF Core 3.0 it&amp;rsquo;s a bunch of joins which can be MUCH slower. It actually seems to be a side effect of the first issue, the new EF policy of doing no evaluation on the client.&lt;/p>
&lt;p>After fixing my small issue, I ran up the application and ran some basic integration tests. Everything seemed fine, so I dropped it onto a test environment to push some more load through, and I quickly realised performance had taken a &lt;em>dramatic&lt;/em> turn for the worse &amp;ndash; &lt;em>at least an order of magnitude slower&lt;/em> than the EF Core 2.0 version. The database use in this application was trivial, but I still went to the trouble of creating a scenario that was as simple as possible. In this, application did nothing more than execute a bunch of &lt;code>SELECT x FROM y WHERE z&lt;/code>, and performance was still terrible. Something was up.&lt;/p>
&lt;h3 id="the-problem">The problem&lt;/h3>
&lt;p>I checked the logs to work out exactly what SQL was being executed. In the previous &amp;ldquo;good&amp;rdquo; version of the code, on EF 2.2, it was the following:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">CorrelationId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">BatchReferenceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">CurrentState&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">RowVersion&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">StoredAt&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="k">Version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">FROM&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">LifeCycle&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">WHERE&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__SourceId_0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__ContentReferenceId_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The EF 3.0 code, however, was executing this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">CorrelationId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">BatchReferenceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">CurrentState&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">RowVersion&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">StoredOrResentAt&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="k">Version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">FROM&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">LifeCycle&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">WHERE&lt;/span> &lt;span class="p">(((&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__SourceId_0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__SourceId_0&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__SourceId_0&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">(((&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__ContentReferenceId_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__ContentReferenceId_1&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">OR&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__ContentReferenceId_1&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What&amp;rsquo;s going on? Let&amp;rsquo;s start with &lt;code>NULL&lt;/code>. As you may or may not be aware, in TSQL/SQL Server, &lt;code>NULL&lt;/code> is not equal to &lt;code>NULL&lt;/code>. Ever wonder why you have to use &lt;code>IS NULL&lt;/code> or similar when writing your SQL queries? That&amp;rsquo;s why. Try it for yourself:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">IIF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">NULL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">IIF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">NULL&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Knowing this, and looking closely at the &lt;code>WHERE&lt;/code> clause of the SQL query, you&amp;rsquo;ll see it&amp;rsquo;s not completely insane. Let&amp;rsquo;s do some formatting:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">CorrelationId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">BatchReferenceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">CurrentState&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">RowVersion&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">StoredOrResentAt&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="k">Version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">FROM&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">LifeCycle&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">AS&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">WHERE&lt;/span>
&lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__SourceId_0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">AND&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__SourceId_0&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">OR&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__SourceId_0&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">AND&lt;/span>
&lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__ContentReferenceId_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">AND&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__ContentReferenceId_1&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NOT&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">OR&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">__ContentReferenceId_1&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">].[&lt;/span>&lt;span class="n">ContentReferenceId&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">IS&lt;/span> &lt;span class="k">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="the-solution">The solution&lt;/h3>
&lt;p>Entity Framework is just trying to protect us from ourselves! What happens if we pass in a &lt;code>NULL&lt;/code> for the SourceId parameter, and expect it to match rows in the database with a &lt;code>NULL&lt;/code> SourceId? In EF 2.2, we&amp;rsquo;d get no results.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> In EF 3.0, however, it would work as expected. But in my case, SourceId is always going to be there, so why this convoluted query? Turns out, I&amp;rsquo;d got sloppy and neglected to set a &lt;code>NOT NULL&lt;/code> constraint in my model definition. So, after rectifying that, and a few other properties I&amp;rsquo;d forgotten&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">entityTypeBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Property&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">SourceId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">IsRequired&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// ...and so on...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I re-run my test, the SQL queries look sensible again, and most importantly the performance is back to where it used to be.&lt;/p>
&lt;p>Why is this happening, and how did nothing go wrong before? In Entity Framework &amp;ldquo;full&amp;rdquo; (not Core!) this behaviour is controlled by the &lt;code>DbContextConfiguration.UseDatabaseNullSemantics&lt;/code> property, and you can read about it &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.entity.infrastructure.dbcontextconfiguration.usedatabasenullsemantics?view=entity-framework-6.2.0">here&lt;/a>. This appears to have &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontextoptionsbuilder?view=efcore-3.0">vanished&lt;/a> in EF Core and is replaced with what I can only describe as frighteningly unpredictable behaviour, though when I get a chance I will do a little more research to find out why.&lt;/p>
&lt;p>I found it surprising that the lack of a constraint in this case would effect performance so significantly, but I think it&amp;rsquo;s a good lesson. It&amp;rsquo;s the case with ORMs, and also with databases in general, that the more information you can give the engine about your data, the less assumptions it has to make and the more performant your queries can be.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>I strongly recommend testing your data layer as close as possible to the metal as you can - things like this are why! &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>I think, but this really surprises me. Further investigation is required! &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Receiving a message on all service instances in MassTransit</title><link>https://blog.nizmow.net/2019/11/receiving-a-message-on-all-service-instances-in-masstransit/</link><pubDate>Tue, 19 Nov 2019 13:33:09 +0200</pubDate><guid>https://blog.nizmow.net/2019/11/receiving-a-message-on-all-service-instances-in-masstransit/</guid><description>&lt;p>&lt;a href="https://masstransit-project.com">MassTransit&lt;/a> is an excellent distributed application framework for .NET that I intend to write more about later. This post documents a solution to a problem you&amp;rsquo;ll probably come across when developing distributed applications with MassTransit.&lt;/p>
&lt;p>MassTransit is built upon a message broker, usually RabbitMQ or Azure Service Bus. MassTransit &amp;ldquo;consumers&amp;rdquo; are attached to message broker queues, to which messages are delivered according to the rules of the message broker. One thing about this that&amp;rsquo;s handy is messages put into a queue are delivered to a consumer only once,&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> which means you can start multiple instances of a service and, since they&amp;rsquo;ll be using the same queue name, you&amp;rsquo;ll get load balancing &amp;ldquo;for free&amp;rdquo;.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>However, in some occasions you might want a message to be received by &lt;em>all&lt;/em> of your service instances, and a likely example of this is you broadcast a message that indicates a service might want to clear its cache. With a normal consumer configured to listen to that message, only one of your service instances will receive it and you&amp;rsquo;ll be left with a happily running instance with stale cache.&lt;/p>
&lt;p>Luckily, MassTransit provides a simple way to configure temporary endpoints, exclusive to each instance. All you need to do is configure your receive endpoint without specifying a queue name:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-cs" data-lang="cs">&lt;span class="n">containerBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddMassTransit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">AddBus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">Bus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Factory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CreateUsingInMemory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cfg&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// a &amp;#39;regular&amp;#39; endpoint
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">cfg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReceiveEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;processing_queue&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Consumer&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">ProcessConsumer&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">// a temporary endpoint
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">cfg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReceiveEndpoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Consumer&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">InvalidateCacheConsumer&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}));&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once starting your application you&amp;rsquo;ll see a queue named something like &lt;code>MYHOST_dotnet_endpoint_8ymoyyn7ywybkygzbdms35zan8&lt;/code>. This looks messy, but it&amp;rsquo;s all just to avoid queue naming collisions across services &amp;ndash; as you can see, it&amp;rsquo;s prefixed with the host name of the server, some metadata, and a random(ish) string. It&amp;rsquo;ll be set to auto-delete, meaning it&amp;rsquo;ll disappear when your service does. After all, no point in receiving cache invalidation messages when your service instance isn&amp;rsquo;t running.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Actually, &lt;a href="https://www.cloudcomputingpatterns.org/at_least_once_delivery/">at least once&lt;/a>. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Well, for the low, low cost of running a message broker. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Incorrect dual monitor positioning in VMWare / Virtualbox with X11 guests</title><link>https://blog.nizmow.net/2019/09/incorrect-dual-monitor-positioning-in-vmware-/-virtualbox-with-x11-guests/</link><pubDate>Fri, 06 Sep 2019 16:20:09 +0200</pubDate><guid>https://blog.nizmow.net/2019/09/incorrect-dual-monitor-positioning-in-vmware-/-virtualbox-with-x11-guests/</guid><description>&lt;p>VMware Workstation has rich guest tooling and supports a range of graphical capabilities in guests, even X11 guests. I do a lot of work in a full-screen VMWare session, and I prefer to have side-by-side monitors with different orientations, which require careful positioning to line up nicely.&lt;/p>
&lt;p>This works okay in the host OS, but VMware is a little special. At first everything seems fine &amp;ndash; moving the mouse cursor between displays indicates they seem to (magically!) be aligned correctly. However, in many setups, mouse clicks will be offset from where the mouse pointer actually is. After a little experimentation what I have determined is happening is this:&lt;/p>
&lt;ul>
&lt;li>The VMWare (or open-vm-tools, or whatever) X/input drivers are somehow rendering the mouse location based on the existing host monitor layout settings &amp;ndash; that is, correctly.&lt;/li>
&lt;li>Whatever you have running on top of X (KDE, XFCE, whatever), is NOT using the existing host monitor layout settings at all.&lt;/li>
&lt;/ul>
&lt;p>The result is that your clicks aren&amp;rsquo;t going where you think they are. In the absence of a proper fix (I&amp;rsquo;ve seen reports of this issue that are &lt;em>8 years old&lt;/em>), one possible solution is to carefully line up your display settings, using whatever tool available in your X environment, to &lt;em>exactly match&lt;/em> the layout of your Windows environment. The issue with this is, no matter how careful you are, you&amp;rsquo;re still likely to have a mouse pointer that&amp;rsquo;s at least a few pixels off from your click destination. The result of that is at best annoying, and at worst disastrous (&amp;ldquo;Are you sure you want to delete this folder?&amp;rdquo; &amp;ldquo;OK / Cancel&amp;rdquo;).&lt;/p>
&lt;p>Luckily, X has great multi monitor support in the form of xrandr. This allows you to specify absolutely pixel-perfect monitor layout, based on n displays and a &amp;ldquo;virtual&amp;rdquo; space which is the smallest possible box that combines them all. Here&amp;rsquo;s an example of my personal setup:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">0,0
.................................
. .-----------..
. | Display 2 |.
. | |.
..----------------.| |.
.| Display 1 || |.
.| || |.
.| || |.
.| || |.
.&amp;#39;----------------&amp;#39;| |.
. | |.
. &amp;#39;-----------&amp;#39;.
.................................
4000,1440
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s two 2560x1440 monitors, the right-hand side in portrait onrientation. Giving me a &amp;ldquo;virtual&amp;rdquo; space of 0,0 to 4000,1440 (2560+1440 being the 4000). According to xrandr, my layout looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">❯ xrandr --listmonitors
Monitors: 2
0: +*Virtual1 2560/677x1440/381+0+620 Virtual1
1: +Virtual2 1440/381x2560/677+2560+0 Virtual2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The last two pairs of numbers at the end there are of most interest to us: &lt;code>0+620&lt;/code> and &lt;code>2560+0&lt;/code> &amp;ndash; those tell us that &lt;code>Virtual1&lt;/code> is offset 620 pixels down in the Y axis, and &lt;code>Virtual2&lt;/code> is offset 2560 across in the X axis. Great! Now all we need to do is check how our guest OS is set up, and pump those exact figures into xrandr.&lt;/p>
&lt;p>If you&amp;rsquo;re unlucky enough to have Windows as a host OS, this isn&amp;rsquo;t as easy as it seems, as Windows does &lt;em>not&lt;/em> have an equivalent of our xrandr command. Luckily, we do have Powershell, and using that we can access the huge &lt;code>System.Windows.Forms&lt;/code> namespace which will allow you to find out pretty much anything about your displays if you know how to look.&lt;/p>
&lt;p>Open a new Powershell session (I don&amp;rsquo;t think this will work in Powershell Core, since we need to access full framework libraries), and first add the namespace:&lt;/p>
&lt;p>&lt;code>Add-Type -AssemblyName System.Windows.Forms&lt;/code>&lt;/p>
&lt;p>Then query the &lt;code>AllScreens&lt;/code> property to get the info we want:&lt;/p>
&lt;p>&lt;code>([System.Windows.Forms]::AllScreens | Select -ExpandProperty WorkingArea)&lt;/code>&lt;/p>
&lt;p>And you&amp;rsquo;ll hopefully see something like the following:&lt;/p>
&lt;p>&lt;img src="https://blog.nizmow.net/WindowsTerminal_2019-09-06_13-34-34.png" alt="Windows Sample">&lt;/p>
&lt;p>Look at that! The second display has some kind of offset there: -620. As you can tell, Windows layouts work a little differently to xrandr. Windows treats the top left corner of the primary monitor as 0,0, so the move to portrait display above that the offset must be a negative. That&amp;rsquo;s okay, we can probably just put that in to xrandr as a positive offset of the left monitor instead&amp;hellip;&lt;/p>
&lt;p>&lt;code>xrandr --output Virtual1 --auto --pos 0x620 --output Virtual2 --auto --pos 2560x0&lt;/code>&lt;/p>
&lt;p>And perfect! Your X display layout should now exactly mirror your Windows layout, and your clicks will go &lt;em>exactly&lt;/em> where you want them to. Now all that&amp;rsquo;s required is to put that xrandr command somewhere in your X startup scripts and enjoy your perfectly aligned VMware Workstation sessions.&lt;/p></description></item></channel></rss>